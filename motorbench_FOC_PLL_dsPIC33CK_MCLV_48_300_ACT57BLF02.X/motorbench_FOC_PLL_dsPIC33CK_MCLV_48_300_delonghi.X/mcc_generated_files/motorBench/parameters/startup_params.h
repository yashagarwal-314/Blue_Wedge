/* This is an autogenerated file from a template. Do not edit this file as it will be overwritten.*/
/**
 *
 * startup_params.h
 * 
 * Startup parameters
 *
 * Component: state machine
 */ /*
 *
 * Motor Control Application Framework
 * R7/RC37 (commit 116330, build on 2023 Feb 09)
 *
 * (c) 2017 - 2023 Microchip Technology Inc. and its subsidiaries. You may use
 * this software and any derivatives exclusively with Microchip products.
 *
 * This software and any accompanying information is for suggestion only.
 * It does not modify Microchip's standard warranty for its products.
 * You agree that you are solely responsible for testing the software and
 * determining its suitability.  Microchip has no obligation to modify,
 * test, certify, or support the software.
 *
 * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS".  NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE,
 * INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY,
 * AND FITNESS FOR A PARTICULAR PURPOSE, OR ITS INTERACTION WITH
 * MICROCHIP PRODUCTS, COMBINATION WITH ANY OTHER PRODUCTS, OR USE IN ANY
 * APPLICATION.
 *
 * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL,
 * PUNITIVE, INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF
 * ANY KIND WHATSOEVER RELATED TO THE USE OF THIS SOFTWARE, THE
 * motorBench(R) DEVELOPMENT SUITE TOOL, PARAMETERS AND GENERATED CODE,
 * HOWEVER CAUSED, BY END USERS, WHETHER MICROCHIP'S CUSTOMERS OR
 * CUSTOMER'S CUSTOMERS, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES OR THE DAMAGES ARE FORESEEABLE. TO THE
 * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL
 * CLAIMS IN ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT
 * OF FEES, IF ANY, THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS
 * SOFTWARE.
 *
 * MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE OF
 * THESE TERMS.
 *
 *
 ******************************************************************************/
#ifndef __STARTUP_PARAMS_H
#define __STARTUP_PARAMS_H

#ifdef  __cplusplus
extern "C" {
#endif

//************** Start-Up Parameters **************

/*
 * Startup operating parameters:
 *
 * Istartup:                       2.500  A
 * Kspring:                      262.541 mNm/rad
 * omega_crit:                     2.191 krad/s
 *                                20.920 kRPM
 * omega0:                        91.630  rad/s
 *                               875.000  RPM
 * omega_min:                     73.304  rad/s
 *                               700.000  RPM
 * omega1:                        91.630  rad/s
 *                               875.000  RPM
 * accel_limit_0:                195.069  rad/s^2
 *                                 1.863 kRPM/s
 * accel_limit_1:                  1.951 krad/s^2
 *                                18.628 kRPM/s
 * accel0:                       195.069  rad/s^2
 *                                 1.863 kRPM/s
 * accel1:                         1.951 krad/s^2
 *                                18.628 kRPM/s
 * t1:                           469.730 ms
 * t2:                             0.000  s
 * B_desired:                    239.681 uNm/(rad/s)
 * B_added:                       89.119 uNm/(rad/s)
 * damping_gain_ideal:             2.546 mA/(rad/s)
 * damping_gain_max:             238.732 mA/(rad/s)
 * damping_gain:                   2.546 mA/(rad/s)
 * damping_threshold:             36.652  rad/s
 *                               350.000  RPM
 * damping_Imax:                 250.000 mA
 * t_rampup:                     343.168 us
 * dIdt_rampup:                    7.285 kA/s
 * t_align:                        0.000  s
 * t_hold:                         0.000  s
 * t_rampdown_decay:              18.259 ms
 * Irampdown_end:                125.000 mA
 * rampup_angle:                 -523.599 mrad
 * align_angle_delta:            523.599 mrad
 * theta_error_converge_rate:     17.453  rad/s
 *                               166.667  RPM
 * align                                  
 *   threshold:                   50.000 mrad
 *   shift:                           10  
 *   frequency:                   19.531  rad/s
 *                               186.510  RPM
 */

/* first startup threshold velocity */
#define STARTUP_ACCEL0_VELOCITY_THRESHOLD       5461      // Q15(  0.16666) = +874.94659 RPM         = +875.00000 RPM         - 0.0061%
/* second startup threshold velocity */
#define STARTUP_ACCEL1_VELOCITY_THRESHOLD       5461      // Q15(  0.16666) = +874.94659 RPM         = +875.00000 RPM         - 0.0061%
/* threshold velocity for damping */
#define STARTUP_DAMPING_THRESHOLD            2185      // Q15(  0.06668) = +350.07477 RPM         = +350.00000 RPM         + 0.0214%
#define Q15_THETADELTA (Q15(THETADELTA/180.0))

/* open loop startup current ramp from initial startup current to startup current */
/* motor current from end of current rampup phase to end of startup */
#define MCAF_STARTUP_CURRENT                 1858      // Q15(  0.05670) =   +2.49986 A           =   +2.50000 A           - 0.0055%
/* motor current at beginning of startup */
#define MCAF_STARTUP_CURRENT_INITIAL            0      // Q15(  0.00000) =   +0.00000 A           =   +0.00000 A           + 0.0000%
/* maximum current amplitude used for active damping */
#define STARTUP_DAMPING_IQMAX                 186      // Q15(  0.00568) = +250.25537 mA          = +250.00000 mA          + 0.1021%
/* binary point for active damping gain */
#define STARTUP_DAMPING_SHIFT                   8
/* active damping gain */
#define STARTUP_DAMPING_GAIN                    8      // Q8(  0.03125)  =   +2.50601 mA/(rad/s)  =   +2.54585 mA/(rad/s)  - 1.5650%

//value of theta_error at transition
#define THETADELTA 10           


#define STARTUP_DELTA_T_FACTOR               1720
#define STARTUP_DELTA_T_FACTOR_ACCELERATION         12
/* first startup acceleration rate */
#define STARTUP_ACCELERATION0                3175      // Q15(  0.09689) = +195.08013 rad/s^2     = +195.06923 rad/s^2     + 0.0056%
/* second startup acceleration rate */
#define STARTUP_ACCELERATION1               31748      // Q15(  0.96887) =   +1.95068 krad/s^2    =   +1.95069 krad/s^2    - 0.0007%

/* increase in current per control cycle, during current rampup */
#define STARTUP_TORQUE_RAMPUP_RATE            271      // Q15(  0.00827) = +364.61938 mA          = +364.25288 mA          + 0.1006%

/* Current rampdown time constant = 0.018259 s */
/* current rampdown decay rate (=1/time constant) */
#define MCAF_RAMPDOWN_DECAY_RATE            22972      // Q23(  0.00274) =  +54.76952 1/s         =  +54.76879 1/s         + 0.0013%
#define MCAF_RAMPDOWN_DECAY_RATE_Q             23
#define MCAF_RAMPDOWN_DECAY_SHIFT (MCAF_RAMPDOWN_DECAY_RATE_Q - 16)

/* current rampdown end threshold */
#define MCAF_RAMPDOWN_END_CURRENT              93      // Q15(  0.00284) = +125.12769 mA          = +125.00000 mA          + 0.1021%

/* align angle shift after current rampup */
#define STARTUP_RAMPUP_ANGLE                -5461      // Q15( -0.16666) = -523.56682 mrad        = -523.59878 mrad        - 0.0061%
/* align angle shift after current rampup */
#define STARTUP_ALIGN_ANGLE_DELTA            5461      // Q15(  0.16666) = +523.56682 mrad        = +523.59878 mrad        - 0.0061%
/* hold time between current rampup and acceleration */
#define STARTUP_ALIGN_TIME                      0      // Q0(  0.00000)  =   +0.00000 s           =   +0.00000 s           + 0.0000%
/* hold time between velocity rampup and current rampdown */
#define STARTUP_HOLD_TIME                       0      // Q0(  0.00000)  =   +0.00000 s           =   +0.00000 s           + 0.0000%
// PWM loops necessary for transitioning from open loop to closed loop
#define TRANSITION_STEPS   IRP_PERCALC/4

/* convergence rate (electrical frequency) for forcing angle error towards zero, during transition to closed-loop */
#define STARTUP_THETA_ERROR_CONVERGE_RATE       2330      // Q24(  0.00014) =  +17.45203 rad/s       =  +17.45329 rad/s       - 0.0072%
#define STARTUP_THETA_ERROR_CONVERGE_RATE_Q         24

/* --- Parameters for reference frame alignment method for startup --- */
/* Alignment threshold; closed-loop commutation proceeds when open-loop
 * frequency and estimator frequency converge within this threshold
 */
#define MCAF_STARTUP_REF_FRAME_ALIGN_THRESHOLD        522      // Q15(  0.01593) =  +50.04612 mrad        =  +50.00000 mrad        + 0.0922%
/* Frequency of reference frame rotation during alignment */
#define MCAF_STARTUP_REF_FRAME_ALIGN_FREQUENCY        388      // Q15(  0.01184) =  +19.52949 rad/s elec  =  +19.53124 rad/s elec  - 0.0090%
/* Shift count used for reference frame rotation alignment */
#define MCAF_STARTUP_REF_FRAME_ALIGN_SHIFT         10

#ifdef  __cplusplus
}
#endif

#endif // __STARTUP_PARAMS_H
